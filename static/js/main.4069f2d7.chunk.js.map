{"version":3,"sources":["Components/WeatherDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["PLACES","name","city","WeatherDisplay","state","weatherData","this","props","fetch","then","res","json","setState","weather","iconUrl","icon","description","src","alt","main","temp","temp_max","temp_min","wind","speed","Component","App","activePlace","className","map","place","index","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NAGaA,G,MAAS,CACpB,CAAEC,KAAM,2BAAQC,KAAM,QACpB,CAAED,KAAM,6CAAWC,KAAM,WACzB,CAAED,KAAM,iCAASC,KAAM,SACvB,CAAED,KAAM,uCAAUC,KAAM,YAGPC,E,kDACjB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,YAAa,MAHH,E,gEAMO,IAAD,OAEZH,EAAOI,KAAKC,MAAML,KAIxBM,MAHY,oDACVN,EACA,gEACSO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GACtC,EAAKC,SAAS,CAAEP,YAAaM,S,+BAK7B,IAAMN,EAAcC,KAAKF,MAAMC,YAC/B,IAAKA,EAAa,OAAO,wCACzB,IAAMQ,EAAUR,EAAYQ,QAAQ,GAClCC,EAAU,mCAAqCD,EAAQE,KAAO,OACpE,OACM,6BACE,2EACYV,EAAYJ,KAAK,6BAAMY,EAAQG,YACzC,yBAAKC,IAAKH,EAASI,IAAKb,EAAYW,eAEtC,0EAAaX,EAAYc,KAAKC,KAA9B,QACA,wGAAkBf,EAAYc,KAAKE,SAAnC,QACA,kGAAiBhB,EAAYc,KAAKG,SAAlC,QACD,+GAAoBjB,EAAYkB,KAAKC,MAArC,uB,GAhCiCC,aCyB7BC,E,kDA7Bb,aAAe,IAAD,8BACZ,gBACKtB,MAAQ,CACbuB,YAAa,GAHD,E,qDAMJ,IAAD,OACDA,EAAcrB,KAAKF,MAAMuB,YAC/B,OACE,yBAAKC,UAAU,OACZ5B,EAAO6B,KAAI,SAACC,EAAOC,GAAR,OACV,4BACEC,IAAKD,EACLE,QAAS,WACP,EAAKrB,SAAS,CAAEe,YAAaI,MAG5BD,EAAM7B,SAGb,kBAAC,EAAD,CACE+B,IAAKL,EACLzB,KAAMF,EAAO2B,GAAazB,Y,GAvBlBuB,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4069f2d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nexport const PLACES = [\r\n  { name: \"Киев\", city: \"Kyiv\"/* zip: \"96803\" */ },\r\n    { name: \"Харьков\", city: \"Kharkov\"/* , zip: \"94303\" */ },\r\n    { name: \"Керчь\", city: \"Kerch\" /* zip: \"94088\" */ },\r\n    { name: \"Лозова\", city: \"Lozova\"/* zip: \"95062\" */ }\r\n  ];\r\n\r\nexport default class WeatherDisplay extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        weatherData: null\r\n      };\r\n    }\r\n    componentDidMount() {\r\n      //const zip = this.props.zip;\r\n      const city = this.props.city;\r\n      const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\" +\r\n        city/* zip */ +\r\n        \"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=metric&lang=ru\";\r\n      fetch(URL).then(res => res.json()).then(json => {\r\n        this.setState({ weatherData: json });\r\n      });\r\n    }\r\n\r\n    render() {\r\n        const weatherData = this.state.weatherData;\r\n        if (!weatherData) return <div>Loading</div>;\r\n        const weather = weatherData.weather[0];\r\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\r\n    return (\r\n          <div>\r\n            <h1>\r\n              В городе {weatherData.name}<br/>{weather.description} \r\n              <img src={iconUrl} alt={weatherData.description} />\r\n            </h1>\r\n            <p>Текущая: {weatherData.main.temp}°</p>\r\n            <p>Максимальная: {weatherData.main.temp_max}°</p>\r\n            <p>Минимальная: {weatherData.main.temp_min}°</p>\r\n           <p>Скорость ветра: {weatherData.wind.speed} м/с</p>\r\n          </div>\r\n        );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherDisplay, { PLACES } from './Components/WeatherDisplay';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n    activePlace: 0,\n    };\n  }\n  render() {\n    const activePlace = this.state.activePlace;\n    return (\n      <div className=\"App\">\n        {PLACES.map((place, index) => (\n          <button\n            key={index}\n            onClick={() => {\n              this.setState({ activePlace: index });\n            }}\n          >\n              {place.name}\n          </button>\n        ))}\n        <WeatherDisplay\n          key={activePlace}\n          city={PLACES[activePlace].city}\n       />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}